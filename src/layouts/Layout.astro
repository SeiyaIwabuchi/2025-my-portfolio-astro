---
import "../styles/global.css";
import { SITE_NAME, SITE_URL, ASSETS } from '../config/links';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

export interface Props {
  title: string;
  description?: string;
  keywords?: string;
  ogImage?: string;
  canonicalUrl?: string;
}

const { 
  title,
  description = "フリーランスシステムエンジニア岩渕 誠也のポートフォリオサイト。フルスタック開発・システム構築の実績とスキルをご紹介します。",
  keywords = "フリーランス,システムエンジニア,プログラマー,フルスタック,岩手,一関,Web開発,アプリ開発",
  ogImage = ASSETS.OGP_DEFAULT,
  canonicalUrl
} = Astro.props;

// メタデータの構築
const fullTitle = title === "ホーム" ? SITE_NAME : `${title} | ${SITE_NAME}`;
const fullCanonicalUrl = canonicalUrl || `${SITE_URL}${Astro.url.pathname}`;
const fullOgImage = ogImage.startsWith('http') ? ogImage : `${SITE_URL}${ogImage}`;

// 現在のページパスを取得
const currentPath = Astro.url.pathname;
---

<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  
  <!-- 基本メタデータ -->
  <title>{fullTitle}</title>
  <meta name="description" content={description} />
  <meta name="keywords" content={keywords} />
  <meta name="author" content="岩渕 誠也 (Seiya Iwabuchi)" />
  
  <!-- Canonical URL -->
  <link rel="canonical" href={fullCanonicalUrl} />
  
  <!-- OGP (Open Graph Protocol) -->
  <meta property="og:type" content="website" />
  <meta property="og:title" content={fullTitle} />
  <meta property="og:description" content={description} />
  <meta property="og:url" content={fullCanonicalUrl} />
  <meta property="og:image" content={fullOgImage} />
  <meta property="og:site_name" content={SITE_NAME} />
  <meta property="og:locale" content="ja_JP" />
  
  <!-- Twitter Card -->
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content={fullTitle} />
  <meta name="twitter:description" content={description} />
  <meta name="twitter:image" content={fullOgImage} />
  
  <!-- ファビコン -->
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <link rel="icon" type="image/png" href="/favicon.png" />
  <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
  
  <!-- フォント -->
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@300;400;500;700&display=swap" rel="stylesheet" />
  
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  
  <!-- 構造化データ (JSON-LD) -->
  <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Person",
      "name": "岩渕 誠也",
      "alternateName": "Seiya Iwabuchi",
      "jobTitle": "フリーランスシステムエンジニア",
      "description": "フルスタック開発・システム構築を専門とするフリーランスエンジニア",
      "address": {
        "@type": "PostalAddress",
        "addressLocality": "一関市",
        "addressRegion": "岩手県",
        "addressCountry": "JP"
      },
      "sameAs": [
        "https://zenn.dev/seichan",
        "mailto:0123ook.biz@gmail.com"
      ],
      "url": "https://SeiyaIwabuchi.github.io/2025-my-portfolio-astro/"
    }
  </script>
  
  <!-- パフォーマンス最適化 -->
  <link rel="dns-prefetch" href="//fonts.googleapis.com" />
  <link rel="dns-prefetch" href="//cdnjs.cloudflare.com" />
</head>

<body class="font-japanese bg-white text-gray-900 leading-relaxed">
  <!-- スキップリンク（アクセシビリティ） -->
  <a href="#main-content" class="skip-link">メインコンテンツへスキップ</a>
  
  <!-- ヘッダー -->
  <Header currentPath={currentPath} />
  
  <!-- メインコンテンツ -->
  <main id="main-content" class="min-h-screen pt-16">
    <slot />
  </main>
  
  <!-- フッター -->
  <Footer />
  
  <!-- ページトップボタン -->
  <button 
    id="page-top" 
    class="fixed bottom-6 right-6 w-12 h-12 bg-blue-600 text-white rounded-full shadow-lg opacity-0 invisible transition-all duration-300 hover:bg-blue-700 z-50"
    aria-label="ページトップへ戻る"
  >
    <i class="fas fa-chevron-up"></i>
  </button>
  
  <!-- ローディングスピナー -->
  <div id="loading-spinner" class="fixed inset-0 bg-white bg-opacity-90 flex items-center justify-center z-[9999] transition-opacity duration-300">
    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
  </div>
</body>
</html>

<style is:global>
  /* 横スクロール防止の基本設定 */
  html, body {
    overflow-x: hidden;
    max-width: 100%;
  }
  
  * {
    box-sizing: border-box;
  }
  
  /* フォント設定 */
  .font-japanese {
    font-family: 'Noto Sans JP', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Hiragino Kaku Gothic ProN', 'Hiragino Sans', Meiryo, sans-serif;
  }
  
  /* スキップリンク */
  .skip-link {
    position: absolute;
    top: -40px;
    left: 6px;
    background: #000;
    color: #fff;
    padding: 8px;
    z-index: 1000;
    text-decoration: none;
    border-radius: 4px;
  }
  
  .skip-link:focus {
    top: 6px;
  }
  
  /* スムーススクロール */
  html {
    scroll-behavior: smooth;
  }
  
  /* ページトップボタンの表示制御 */
  #page-top.show {
    opacity: 1;
    visibility: visible;
  }
  
  /* ローディングスピナーの非表示 */
  #loading-spinner.hidden {
    opacity: 0;
    pointer-events: none;
  }
  
  /* フォーカス表示の改善 */
  *:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }
  
  /* 選択テキストのスタイル */
  ::selection {
    background-color: #3b82f6;
    color: white;
  }
  
  /* カスタムスクロールバー */
  ::-webkit-scrollbar {
    width: 8px;
  }
  
  ::-webkit-scrollbar-track {
    background: #f1f5f9;
  }
  
  ::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 4px;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }
  
  /* ベースアニメーション */
  .fade-in-up {
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.6s ease;
  }
  
  .fade-in-up.animate-in {
    opacity: 1;
    transform: translateY(0);
  }
  
  .fade-in-left {
    opacity: 0;
    transform: translateX(-20px);
    transition: all 0.6s ease;
  }
  
  .fade-in-left.animate-in {
    opacity: 1;
    transform: translateX(0);
  }
  
  .fade-in-right {
    opacity: 0;
    transform: translateX(20px);
    transition: all 0.6s ease;
    max-width: 100%;
    overflow: hidden;
  }
  
  .fade-in-right.animate-in {
    opacity: 1;
    transform: translateX(0);
  }
  
  .scale-in {
    opacity: 0;
    transform: scale(0.8);
    transition: all 0.6s ease;
  }
  
  .scale-in.animate-in {
    opacity: 1;
    transform: scale(1);
  }
  
  /* モバイルでの横スクロール防止 */
  @media (max-width: 768px) {
    .fade-in-left,
    .fade-in-right {
      transform: translateY(20px) !important;
    }
    
    .fade-in-left.animate-in,
    .fade-in-right.animate-in {
      transform: translateY(0) !important;
    }
    
    /* コンテナの幅制限 */
    .max-w-6xl,
    .max-w-4xl {
      max-width: calc(100% - 2rem);
      margin-left: auto;
      margin-right: auto;
    }
  }
  
  /* ホバー効果 */
  .hover-lift {
    transition: transform 0.2s ease;
  }
  
  .hover-lift:hover {
    transform: translateY(-2px);
  }
  
  .card-fade {
    transition: all 0.3s ease;
  }
  
  .card-fade:hover {
    transform: translateY(-4px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  }
  
  /* ボタンアニメーション */
  .btn-pulse {
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 rgba(0, 0, 0, 0.7);
    }
    70% {
      box-shadow: 0 0 0 10px rgba(0, 0, 0, 0);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(0, 0, 0, 0);
    }
  }
  
  /* フローティングアニメーション */
  .float {
    animation: float 3s ease-in-out infinite;
  }
  
  @keyframes float {
    0%, 100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-10px);
    }
  }
  
  /* プリント用スタイル */
  @media print {
    #page-top,
    header nav,
    footer {
      display: none !important;
    }
    
    body {
      font-size: 12pt;
      line-height: 1.4;
    }
    
    .no-print {
      display: none !important;
    }
  }
  
  /* ダークモード対応（将来の拡張用） */
  @media (prefers-color-scheme: dark) {
    :root {
      --bg-color: #1f2937;
      --text-color: #f9fafb;
    }
  }
  
  /* 縮小モーション設定の尊重 */
  @media (prefers-reduced-motion: reduce) {
    *,
    *::before,
    *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
      scroll-behavior: auto !important;
    }
    
    .fade-in-up,
    .fade-in-left,
    .fade-in-right,
    .scale-in {
      opacity: 1;
      transform: none;
    }
  }
  
  /* レスポンシブタイポグラフィ */
  @media (max-width: 640px) {
    h1 {
      font-size: 2rem;
    }
    
    h2 {
      font-size: 1.5rem;
    }
    
    h3 {
      font-size: 1.25rem;
    }
  }
  
  /* ユーティリティクラス */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }
  
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }
  
  @media (min-width: 640px) {
    .container {
      padding: 0 1.5rem;
    }
  }
  
  @media (min-width: 1024px) {
    .container {
      padding: 0 2rem;
    }
  }
</style>

<script>
  // ページトップボタンの制御
  function initPageTopButton() {
    const pageTopBtn = document.getElementById('page-top');
    if (!pageTopBtn) return;
    
    // スクロール監視
    window.addEventListener('scroll', () => {
      if (window.scrollY > 300) {
        pageTopBtn.classList.add('show');
      } else {
        pageTopBtn.classList.remove('show');
      }
    });
    
    // クリック時のスムーススクロール
    pageTopBtn.addEventListener('click', () => {
      window.scrollTo({ top: 0, behavior: 'smooth' });
    });
  }
  
  // ローディングスピナーの制御
  function initLoadingSpinner() {
    const spinner = document.getElementById('loading-spinner');
    if (!spinner) return;
    
    // ページ読み込み完了後にスピナーを非表示
    window.addEventListener('load', () => {
      setTimeout(() => {
        spinner.classList.add('hidden');
      }, 500);
    });
  }
  
  // スクロールアニメーションの初期化
  function initScrollAnimations() {
    // Intersection Observerでスクロールアニメーションを制御
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate-in');
          }
        });
      },
      {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      }
    );

    // アニメーション対象要素を監視
    const animElements = document.querySelectorAll('[data-animation], .fade-in-up, .fade-in-left, .fade-in-right, .scale-in');
    animElements.forEach((el) => {
      observer.observe(el);
    });
  }
  
  // 外部リンクの自動設定
  function initExternalLinks() {
    const links = document.querySelectorAll<HTMLAnchorElement>('a[href^="http"]');
    links.forEach(link => {
      if (!link.hostname.includes(window.location.hostname)) {
        link.setAttribute('target', '_blank');
        link.setAttribute('rel', 'noopener noreferrer');
        
        // アクセシビリティ：外部リンクであることを示す
        const srText = document.createElement('span');
        srText.className = 'sr-only';
        srText.textContent = '（外部リンク）';
        link.appendChild(srText);
      }
    });
  }
  
  // 画像遅延読み込み（ネイティブサポートがない場合）
  function initLazyLoading() {
    if ('loading' in HTMLImageElement.prototype) {
      const images = document.querySelectorAll<HTMLImageElement>('img[data-src]');
      images.forEach(img => {
        if (img.dataset.src) {
          img.src = img.dataset.src;
          img.removeAttribute('data-src');
        }
      });
    } else {
      // Intersection Observer フォールバック
      const imageObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target as HTMLImageElement;
            if (img.dataset.src) {
              img.src = img.dataset.src;
              img.removeAttribute('data-src');
              imageObserver.unobserve(img);
            }
          }
        });
      });
      
      const lazyImages = document.querySelectorAll<HTMLImageElement>('img[data-src]');
      lazyImages.forEach(img => imageObserver.observe(img));
    }
  }
  
  // エラーハンドリング
  function initErrorHandling() {
    // 画像読み込みエラーの処理
    document.addEventListener('error', (e) => {
      const target = e.target as HTMLElement;
      if (target && target.tagName === 'IMG') {
        const img = target as HTMLImageElement;
        // 注意: JavaScript内では動的なbaseパス適用が難しいため、ハードコーディング
        img.src = '/images/placeholder.jpg';
        img.alt = '画像を読み込めませんでした';
      }
    }, true);
    
    // JavaScript エラーの記録
    window.addEventListener('error', (e) => {
      console.error('JavaScript Error:', e.error);
      // 本番環境では分析ツールに送信
    });
  }
  
  // キーボードナビゲーション強化
  function initKeyboardNavigation() {
    // Tabキーでのフォーカス表示を改善
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Tab') {
        document.body.classList.add('keyboard-navigation');
      }
    });
    
    document.addEventListener('mousedown', () => {
      document.body.classList.remove('keyboard-navigation');
    });
  }
  
  // パフォーマンス計測
  function measurePerformance() {
    if (typeof performance !== 'undefined' && performance.mark) {
      performance.mark('layout-init-start');
      
      // 初期化完了後にマーク
      window.addEventListener('load', () => {
        performance.mark('layout-init-end');
        performance.measure('layout-init', 'layout-init-start', 'layout-init-end');
        
        // パフォーマンス情報をコンソールに出力（開発時のみ）
        if (typeof window !== 'undefined' && window.location.hostname === 'localhost') {
          const measure = performance.getEntriesByName('layout-init')[0];
          console.log(`Layout initialization took ${measure.duration.toFixed(2)}ms`);
        }
      });
    }
  }
  
  // 初期化実行
  document.addEventListener('DOMContentLoaded', () => {
    initPageTopButton();
    initLoadingSpinner();
    initScrollAnimations();
    initExternalLinks();
    initLazyLoading();
    initErrorHandling();
    initKeyboardNavigation();
    measurePerformance();
  });
</script>
